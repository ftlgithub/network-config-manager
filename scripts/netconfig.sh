#!/bin/bash

# 网络配置管理脚本
# 支持Linux和macOS系统

# 显示帮助信息
show_help() {
  echo "网络配置管理脚本"
  echo "用法: $0 <命令> [参数...]"
  echo ""
  echo "命令:"
  echo "  help                  显示帮助信息"
  echo "  set-ip <接口> <IP> <掩码> [网关] [DNS]  设置静态IP配置"
  echo "  set-dhcp <接口>      设置DHCP模式"
  echo "  restart-network      重启网络服务"
  echo "  flush-dns            刷新DNS缓存"
  echo "  show <接口>          显示接口信息"
  echo ""
  echo "示例:"
  echo "  $0 set-ip eth0 192.168.1.100 255.255.255.0 192.168.1.1 8.8.8.8,8.8.4.4"
  echo "  $0 set-dhcp en0"
  echo "  $0 restart-network"
}

# 检测操作系统类型
detect_os() {
  if [[ "$(uname)" == "Darwin" ]]; then
    echo "macos"
  elif [[ "$(uname)" == "Linux" ]]; then
    echo "linux"
  else
    echo "unsupported"
  fi
}

# 将子网掩码转换为CIDR格式
netmask_to_cidr() {
    local netmask=$1
    local cidr=0
    
    IFS='.' read -ra ADDR <<< "$netmask"
    for octet in "${ADDR[@]}"; do
        case $octet in
            255) cidr=$((cidr + 8)) ;;
            254) cidr=$((cidr + 7)) ;;
            252) cidr=$((cidr + 6)) ;;
            248) cidr=$((cidr + 5)) ;;
            240) cidr=$((cidr + 4)) ;;
            224) cidr=$((cidr + 3)) ;;
            192) cidr=$((cidr + 2)) ;;
            128) cidr=$((cidr + 1)) ;;
            0) ;;
            *) return 1 ;; # 无效的子网掩码
        esac
    done
    
    echo $cidr
    return 0
}

# 设置静态IP - Linux
set_ip_linux() {
  local interface=$1
  local ip=$2
  local netmask=$3
  local gateway=$4
  local dns=$5
  
  # 将子网掩码转换为CIDR格式
  local cidr
  cidr=$(netmask_to_cidr "$netmask")
  if [[ $? -ne 0 ]]; then
      echo "错误: 无效的子网掩码格式: $netmask"
      return 1
  fi
  
  echo "使用CIDR格式: $ip/$cidr"
  
  # 检查接口是否存在
  if ! ip link show "$interface" &>/dev/null; then
    echo "错误: 网络接口 $interface 不存在"
    return 1
  fi
  
  # 确保接口处于up状态
  echo "启用网络接口 $interface"
  ip link set "$interface" up
  
  # 等待接口启动
  sleep 1
  
  # 清除现有IP配置
  echo "清除现有IP配置"
  ip addr flush dev "$interface"
  
  # 设置新的IP地址
  echo "设置IP地址: $ip/$cidr"
  if ! ip addr add "$ip/$cidr" dev "$interface"; then
    echo "错误: 设置IP地址失败"
    return 1
  fi
  
  # 设置网关
  if [[ -n "$gateway" ]]; then
    echo "设置网关: $gateway"
    # 删除现有默认路由
    ip route del default 2>/dev/null || true
    # 添加新的默认路由
    if ! ip route add default via "$gateway" dev "$interface"; then
      echo "警告: 设置网关失败，尝试备用方法"
      # 尝试不指定接口的方式
      ip route add default via "$gateway" 2>/dev/null || echo "警告: 网关设置失败"
    fi
  fi
  
  # 设置DNS
  if [[ -n "$dns" ]]; then
    # 备份resolv.conf
    cp /etc/resolv.conf /etc/resolv.conf.bak
    
    # 写入新的DNS配置
    echo "# Generated by netconfig.sh" > /etc/resolv.conf
    
    # 处理多个DNS服务器（以逗号分隔）
    IFS=',' read -ra DNS_SERVERS <<< "$dns"
    for dns_server in "${DNS_SERVERS[@]}"; do
      echo "nameserver $dns_server" >> /etc/resolv.conf
    done
  fi
  
  # 验证IP设置
  sleep 2
  local current_ip=$(ip addr show "$interface" | grep "inet " | awk '{print $2}' | cut -d'/' -f1)
  if [[ "$current_ip" == "$ip" ]]; then
    echo "成功: 已设置 $interface 为静态IP: $ip"
    
    # 显示当前配置
    echo "当前配置:"
    echo "  IP地址: $current_ip/$cidr"
    if [[ -n "$gateway" ]]; then
      local current_gateway=$(ip route show default | grep "$interface" | awk '{print $3}' | head -n1)
      echo "  网关: ${current_gateway:-未设置}"
    fi
  else
    echo "错误: IP设置失败，当前IP: ${current_ip:-未获取到}"
    return 1
  fi
}

# 设置静态IP - macOS
set_ip_macos() {
  local interface=$1
  local ip=$2
  local netmask=$3
  local gateway=$4
  local dns=$5
  
  # 获取网络服务名称
  local service_name=$(networksetup -listallhardwareports | grep -A 1 "Device: $interface" | grep "Hardware Port" | cut -d: -f2 | sed 's/^ *//')
  
  if [[ -z "$service_name" ]]; then
    echo "错误: 无法找到接口 $interface 对应的网络服务名称"
    exit 1
  fi
  
  # 设置IP、子网掩码和路由器
  networksetup -setmanual "$service_name" "$ip" "$netmask" "$gateway"
  
  # 设置DNS
  if [[ -n "$dns" ]]; then
    # 处理多个DNS服务器（以逗号分隔）
    IFS=',' read -ra DNS_SERVERS <<< "$dns"
    networksetup -setdnsservers "$service_name" "${DNS_SERVERS[@]}"
  fi
  
  echo "已设置 $interface ($service_name) 为静态IP: $ip"
}

# 设置DHCP - Linux
set_dhcp_linux() {
  local interface=$1
  
  # 清除现有配置
  ip addr flush dev "$interface"
  
  # 重启接口以触发DHCP
  ip link set "$interface" down
  ip link set "$interface" up
  
  # 使用dhclient获取IP（如果可用）
  if command -v dhclient &>/dev/null; then
    dhclient -r "$interface"
    dhclient "$interface"
  fi
  
  echo "已设置 $interface 为DHCP模式"
}

# 设置DHCP - macOS
set_dhcp_macos() {
  local interface=$1
  
  # 获取网络服务名称
  local service_name=$(networksetup -listallhardwareports | grep -A 1 "Device: $interface" | grep "Hardware Port" | cut -d: -f2 | sed 's/^ *//')
  
  if [[ -z "$service_name" ]]; then
    echo "错误: 无法找到接口 $interface 对应的网络服务名称"
    exit 1
  fi
  
  # 设置DHCP
  networksetup -setdhcp "$service_name"
  
  # 设置自动获取DNS
  networksetup -setdnsservers "$service_name" "Empty"
  
  echo "已设置 $interface ($service_name) 为DHCP模式"
}

# 重启网络 - Linux
restart_network_linux() {
  # 尝试多种方法重启网络
  if command -v systemctl &>/dev/null; then
    systemctl restart NetworkManager.service 2>/dev/null || \
    systemctl restart networking.service 2>/dev/null || \
    systemctl restart network.service 2>/dev/null
  elif command -v service &>/dev/null; then
    service network restart 2>/dev/null || \
    service networking restart 2>/dev/null || \
    service NetworkManager restart 2>/dev/null
  else
    # 如果以上方法都不可用，尝试重启所有网络接口
    for interface in $(ip link show | grep -E '^[0-9]+:' | cut -d: -f2 | sed 's/ //g' | grep -v lo); do
      ip link set "$interface" down
      ip link set "$interface" up
    done
  fi
  
  echo "网络服务已重启"
}

# 重启网络 - macOS
restart_network_macos() {
  # 获取所有网络服务
  local services=$(networksetup -listallnetworkservices | grep -v "*" | tail -n +2)
  
  # 重启每个服务
  for service in $services; do
    networksetup -setnetworkserviceenabled "$service" off
    networksetup -setnetworkserviceenabled "$service" on
  done
  
  # 刷新DNS缓存
  dscacheutil -flushcache
  killall -HUP mDNSResponder 2>/dev/null || true
  
  echo "网络服务已重启"
}

# 刷新DNS缓存 - Linux
flush_dns_linux() {
  if command -v systemd-resolve &>/dev/null; then
    systemd-resolve --flush-caches
  elif command -v service &>/dev/null; then
    service nscd restart 2>/dev/null || true
  fi
  
  echo "DNS缓存已刷新"
}

# 刷新DNS缓存 - macOS
flush_dns_macos() {
  dscacheutil -flushcache
  killall -HUP mDNSResponder 2>/dev/null || true
  
  echo "DNS缓存已刷新"
}

# 显示接口信息 - Linux
show_interface_linux() {
  local interface=$1
  
  echo "接口信息: $interface"
  echo "----------------------------"
  
  # 显示IP和MAC地址
  ip addr show dev "$interface"
  
  # 显示路由信息
  echo "\n路由信息:"
  ip route show dev "$interface"
  
  # 显示DNS信息
  echo "\nDNS服务器:"
  grep nameserver /etc/resolv.conf
}

# 显示接口信息 - macOS
show_interface_macos() {
  local interface=$1
  
  # 获取网络服务名称
  local service_name=$(networksetup -listallhardwareports | grep -A 1 "Device: $interface" | grep "Hardware Port" | cut -d: -f2 | sed 's/^ *//')
  
  if [[ -z "$service_name" ]]; then
    echo "错误: 无法找到接口 $interface 对应的网络服务名称"
    exit 1
  fi
  
  echo "接口信息: $interface ($service_name)"
  echo "----------------------------"
  
  # 显示IP和MAC地址
  ifconfig "$interface"
  
  # 显示网络服务配置
  echo "\n网络服务配置:"
  networksetup -getinfo "$service_name"
  
  # 显示DNS信息
  echo "\nDNS服务器:"
  networksetup -getdnsservers "$service_name"
}

# 主函数
main() {
  # 检查参数
  if [[ $# -lt 1 ]]; then
    show_help
    exit 1
  fi
  
  # 获取操作系统类型
  OS_TYPE=$(detect_os)
  
  if [[ "$OS_TYPE" == "unsupported" ]]; then
    echo "错误: 不支持的操作系统"
    exit 1
  fi
  
  # 解析命令
  COMMAND=$1
  shift
  
  case "$COMMAND" in
    help)
      show_help
      ;;
    set-ip)
      if [[ $# -lt 3 ]]; then
        echo "错误: set-ip 命令需要至少3个参数"
        echo "用法: $0 set-ip <接口> <IP> <掩码> [网关] [DNS]"
        exit 1
      fi
      
      INTERFACE=$1
      IP=$2
      NETMASK=$3
      GATEWAY=${4:-""}
      DNS=${5:-""}
      
      if [[ "$OS_TYPE" == "linux" ]]; then
        set_ip_linux "$INTERFACE" "$IP" "$NETMASK" "$GATEWAY" "$DNS"
      elif [[ "$OS_TYPE" == "macos" ]]; then
        set_ip_macos "$INTERFACE" "$IP" "$NETMASK" "$GATEWAY" "$DNS"
      fi
      ;;
    set-dhcp)
      if [[ $# -lt 1 ]]; then
        echo "错误: set-dhcp 命令需要1个参数"
        echo "用法: $0 set-dhcp <接口>"
        exit 1
      fi
      
      INTERFACE=$1
      
      if [[ "$OS_TYPE" == "linux" ]]; then
        set_dhcp_linux "$INTERFACE"
      elif [[ "$OS_TYPE" == "macos" ]]; then
        set_dhcp_macos "$INTERFACE"
      fi
      ;;
    restart-network)
      if [[ "$OS_TYPE" == "linux" ]]; then
        restart_network_linux
      elif [[ "$OS_TYPE" == "macos" ]]; then
        restart_network_macos
      fi
      ;;
    flush-dns)
      if [[ "$OS_TYPE" == "linux" ]]; then
        flush_dns_linux
      elif [[ "$OS_TYPE" == "macos" ]]; then
        flush_dns_macos
      fi
      ;;
    show)
      if [[ $# -lt 1 ]]; then
        echo "错误: show 命令需要1个参数"
        echo "用法: $0 show <接口>"
        exit 1
      fi
      
      INTERFACE=$1
      
      if [[ "$OS_TYPE" == "linux" ]]; then
        show_interface_linux "$INTERFACE"
      elif [[ "$OS_TYPE" == "macos" ]]; then
        show_interface_macos "$INTERFACE"
      fi
      ;;
    *)
      echo "错误: 未知命令 '$COMMAND'"
      show_help
      exit 1
      ;;
  esac
}

# 执行主函数
main "$@"